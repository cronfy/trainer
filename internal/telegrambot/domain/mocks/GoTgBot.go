// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	bot "github.com/go-telegram/bot"

	mock "github.com/stretchr/testify/mock"

	models "github.com/go-telegram/bot/models"
)

// GoTgBot is an autogenerated mock type for the GoTgBot type
type GoTgBot struct {
	mock.Mock
}

type GoTgBot_Expecter struct {
	mock *mock.Mock
}

func (_m *GoTgBot) EXPECT() *GoTgBot_Expecter {
	return &GoTgBot_Expecter{mock: &_m.Mock}
}

// SendMessage provides a mock function with given fields: ctx, params
func (_m *GoTgBot) SendMessage(ctx context.Context, params *bot.SendMessageParams) (*models.Message, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 *models.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bot.SendMessageParams) (*models.Message, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bot.SendMessageParams) *models.Message); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bot.SendMessageParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GoTgBot_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type GoTgBot_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - params *bot.SendMessageParams
func (_e *GoTgBot_Expecter) SendMessage(ctx interface{}, params interface{}) *GoTgBot_SendMessage_Call {
	return &GoTgBot_SendMessage_Call{Call: _e.mock.On("SendMessage", ctx, params)}
}

func (_c *GoTgBot_SendMessage_Call) Run(run func(ctx context.Context, params *bot.SendMessageParams)) *GoTgBot_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*bot.SendMessageParams))
	})
	return _c
}

func (_c *GoTgBot_SendMessage_Call) Return(_a0 *models.Message, _a1 error) *GoTgBot_SendMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GoTgBot_SendMessage_Call) RunAndReturn(run func(context.Context, *bot.SendMessageParams) (*models.Message, error)) *GoTgBot_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewGoTgBot creates a new instance of GoTgBot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGoTgBot(t interface {
	mock.TestingT
	Cleanup(func())
}) *GoTgBot {
	mock := &GoTgBot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
