// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// RandomTool is an autogenerated mock type for the randomTool type
type RandomTool struct {
	mock.Mock
}

type RandomTool_Expecter struct {
	mock *mock.Mock
}

func (_m *RandomTool) EXPECT() *RandomTool_Expecter {
	return &RandomTool_Expecter{mock: &_m.Mock}
}

// Chance provides a mock function with given fields: chance
func (_m *RandomTool) Chance(chance int8) bool {
	ret := _m.Called(chance)

	if len(ret) == 0 {
		panic("no return value specified for Chance")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(int8) bool); ok {
		r0 = rf(chance)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RandomTool_Chance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Chance'
type RandomTool_Chance_Call struct {
	*mock.Call
}

// Chance is a helper method to define mock.On call
//   - chance int8
func (_e *RandomTool_Expecter) Chance(chance interface{}) *RandomTool_Chance_Call {
	return &RandomTool_Chance_Call{Call: _e.mock.On("Chance", chance)}
}

func (_c *RandomTool_Chance_Call) Run(run func(chance int8)) *RandomTool_Chance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int8))
	})
	return _c
}

func (_c *RandomTool_Chance_Call) Return(_a0 bool) *RandomTool_Chance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RandomTool_Chance_Call) RunAndReturn(run func(int8) bool) *RandomTool_Chance_Call {
	_c.Call.Return(run)
	return _c
}

// RandomBetween provides a mock function with given fields: min, max
func (_m *RandomTool) RandomBetween(min int, max int) int {
	ret := _m.Called(min, max)

	if len(ret) == 0 {
		panic("no return value specified for RandomBetween")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(min, max)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// RandomTool_RandomBetween_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RandomBetween'
type RandomTool_RandomBetween_Call struct {
	*mock.Call
}

// RandomBetween is a helper method to define mock.On call
//   - min int
//   - max int
func (_e *RandomTool_Expecter) RandomBetween(min interface{}, max interface{}) *RandomTool_RandomBetween_Call {
	return &RandomTool_RandomBetween_Call{Call: _e.mock.On("RandomBetween", min, max)}
}

func (_c *RandomTool_RandomBetween_Call) Run(run func(min int, max int)) *RandomTool_RandomBetween_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *RandomTool_RandomBetween_Call) Return(_a0 int) *RandomTool_RandomBetween_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RandomTool_RandomBetween_Call) RunAndReturn(run func(int, int) int) *RandomTool_RandomBetween_Call {
	_c.Call.Return(run)
	return _c
}

// NewRandomTool creates a new instance of RandomTool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRandomTool(t interface {
	mock.TestingT
	Cleanup(func())
}) *RandomTool {
	mock := &RandomTool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
