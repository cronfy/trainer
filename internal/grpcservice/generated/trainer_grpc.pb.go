// Code generated by protoc-gen-go-grpcservice. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpcservice v1.5.1
// - protoc             v3.12.4
// source: trainer.proto

package generated

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpcservice package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Trainer_GetMultiplyTask_FullMethodName   = "/Trainer/GetMultiplyTask"
	Trainer_SolveMultiplyTask_FullMethodName = "/Trainer/SolveMultiplyTask"
)

// TrainerClient is the client API for Trainer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainerClient interface {
	// get a multiplication task
	GetMultiplyTask(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MultiplyTask, error)
	// solve a multiplication task and verify the solution
	SolveMultiplyTask(ctx context.Context, in *MultiplyTaskSolution, opts ...grpc.CallOption) (*SolutionResult, error)
}

type trainerClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainerClient(cc grpc.ClientConnInterface) TrainerClient {
	return &trainerClient{cc}
}

func (c *trainerClient) GetMultiplyTask(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MultiplyTask, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiplyTask)
	err := c.cc.Invoke(ctx, Trainer_GetMultiplyTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainerClient) SolveMultiplyTask(ctx context.Context, in *MultiplyTaskSolution, opts ...grpc.CallOption) (*SolutionResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SolutionResult)
	err := c.cc.Invoke(ctx, Trainer_SolveMultiplyTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainerServer is the server API for Trainer service.
// All implementations must embed UnimplementedTrainerServer
// for forward compatibility.
type TrainerServer interface {
	// get a multiplication task
	GetMultiplyTask(context.Context, *empty.Empty) (*MultiplyTask, error)
	// solve a multiplication task and verify the solution
	SolveMultiplyTask(context.Context, *MultiplyTaskSolution) (*SolutionResult, error)
	mustEmbedUnimplementedTrainerServer()
}

// UnimplementedTrainerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTrainerServer struct{}

func (UnimplementedTrainerServer) GetMultiplyTask(context.Context, *empty.Empty) (*MultiplyTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiplyTask not implemented")
}
func (UnimplementedTrainerServer) SolveMultiplyTask(context.Context, *MultiplyTaskSolution) (*SolutionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolveMultiplyTask not implemented")
}
func (UnimplementedTrainerServer) mustEmbedUnimplementedTrainerServer() {}
func (UnimplementedTrainerServer) testEmbeddedByValue()                 {}

// UnsafeTrainerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainerServer will
// result in compilation errors.
type UnsafeTrainerServer interface {
	mustEmbedUnimplementedTrainerServer()
}

func RegisterTrainerServer(s grpc.ServiceRegistrar, srv TrainerServer) {
	// If the following call pancis, it indicates UnimplementedTrainerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Trainer_ServiceDesc, srv)
}

func _Trainer_GetMultiplyTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerServer).GetMultiplyTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trainer_GetMultiplyTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerServer).GetMultiplyTask(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trainer_SolveMultiplyTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiplyTaskSolution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerServer).SolveMultiplyTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trainer_SolveMultiplyTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerServer).SolveMultiplyTask(ctx, req.(*MultiplyTaskSolution))
	}
	return interceptor(ctx, in, info, handler)
}

// Trainer_ServiceDesc is the grpc.ServiceDesc for Trainer service.
// It's only intended for direct use with grpcservice.RegisterService,
// and not to be introspected or modified (even as a copy)
var Trainer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Trainer",
	HandlerType: (*TrainerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMultiplyTask",
			Handler:    _Trainer_GetMultiplyTask_Handler,
		},
		{
			MethodName: "SolveMultiplyTask",
			Handler:    _Trainer_SolveMultiplyTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trainer.proto",
}
